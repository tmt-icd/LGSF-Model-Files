subsystem = LGSF
component = te

description = Top End Assembly commands.

receive = [
 {
    name            = lltCover
    description     = Open or close the LLT cover
    args = [
      {
        name        = select
        description = target position
        enum        = [OPEN, CLOSE]
      }
    ]
    requiredArgs = [ select ]
  }
  {
    name            = datum
    description     = Datum the actuators
    args = [
      {
        name		    = all
        description	= Select all available beams
        type		    = boolean
      }
      {
        name        = beam
        description = Beam select
        type		    = array
        dimensions	= [8]
        items = {
	        type    	= boolean
		    }
      }
      {
        name        = mirror
        description = List of mirrors with actuators
        type		    = array
        items = {
          enum      = [ALL, AGPA, AGCA, AGFM, KM, LTPM]
        }
      }
    ]
  }
  {
    name            = stop
    description     = Stop the actuators
    args = [
      {
        name		    = all
        description	= Select all available beams
        type		    = boolean
      }
      {
        name        = beam
        description = Beam select
        type		    = array
        dimensions	= [8]
        items = {
	        type    	= boolean
		    }
      }
    {
        name        = mirror
        description = List of mirrors with actuators
        type		    = array
        items = {
          enum      = [ALL, AGPA, AGCA, AGFM, KM, LTPM]
        }
      }
    ]
  }
  {
    name            = move
    description     = "move an actuated mirror [engineering]"
    args = [
      {
        name        = beam
        description = beam index
        type		    = integer
      }
      {
        name        = mirror
        description = List of mirrors with actuators
        enum        = [AGPA, AGCA, AGFM, KM, LTPM]
      }
      {
        name        = angle
        description = Amount to move
        type        = array
        maxItems  	= 2
        items = {
          type = double
          units = arcsec
        }
      }
    ]
  }
  {
    name            = follow
    description     = Enable continuous control of the actuators
    args = [
      {
        name        = fcsLut
        description = Whether FCS look up table is applied
        type        = boolean
      }
      {
        name        = fcsLutUpdate
        description = Whether to update LUT for the FCS control
        type        = boolean
      }
      {
        name        = tcsKm
        description = Whether TCS KM demeand is applied
        type        = boolean
      }
      {
        name        = rtcFsm
        description = Whether RTC real time FSM demands are applied
        type        = boolean
      }
      {
        name        = rtcAcq
        description = Whether RTC published asterism pointing errors are applied
        type        = boolean
      }
      {
        name        = offloadFsm
        description = Enable offloading of AG FSM demands to the following mechanisms
        type        = array
        items = {
          enum      = [ ALL, AGPA, AGCA, KM, LTPM]
        }
      }
      {
        name        = offloadLtpm
        description = Enable offloading of LTPM demands to FCSx
        type        = boolean
      }
    ]
  }
  {
    name            = calibInteraction
    description     = Calibrate the interaction matrices of each mirror or combination
    args = [
      {
        name        = beam
        description = Beam select
        type		    = array
        dimensions	= [8]
        items = {
	        type    	= boolean
		    }
      }
      {
        name        = stepSize
        description  = "step size to take in physical unit (arcsec for tip/tilt mirrors, degree for rotators)"
        type        = float
      }
      {
        name        = mirror
        description = "Select the mirror. Calibrating LTPM requires the BDM to be open."
        enum        = [AGPA, AGCA, AGFM, KM, FM3, LTPM]
      }
      {
        name        = sensor
        description = "Select the PAC or DSWFS as sensor. AUTO will select the most appropriate one."
        enum        = [AUTO, DSWFS, AGCA, AGAM, AGFM, FM3, L1, L2]
      }

      {
        name        = updateConfig
        description = update the configuration based on measurement results
        type        = boolean
      }
    ]
  }
  {
    name            = calibControl
    description     = Calibrate the principle axes orientation and control matrices of each mirror or combination
    args = [
      {
        name        = beam
        description = Beam select
        type		    = array
        dimensions	= [8]
        items = {
	        type    	= boolean
		    }
      }
      {
        name        = combination
        description = Select the pointing/centering combination to update based on most recent calibration results
        enum        = [None, AGPointing, AGCentering, LTPM]
      }
      {
        name        = updateConfig
        description = update the configuration based on measurement results
        type        = boolean
      }
    ]
  }
  {
    name            = calibOnAxisAG
    description     = Calibrate the on axis beam pointing and centering
    args = [
      {
        name        = beam
        description = index of the on axis beam
        type        = integer
      }
      {
        name        = updateConfiguration
        description = Use the determined results to update the configuration.
        type        = boolean
      }
    ]
  }
  {
    name            = calibOnAxisLLT
    description     = Calibrate the LLT LTPM
    args = [
      {
        name        = updateConfiguration
        description = Use the determined results to update the configuration.
        type        = boolean
      }
    ]
  }

  {
    name            = calibOffAxisAGPointing
    description     = Calibrate the off-axis beam pointing for the asterism
    args = [
      {
        name        = beam
        description = index of the off axis beam
        type        = integer
      }
      {
        name        = updateConfiguration
        description = Use the determined results to update the configuration.
        type        = boolean
      }
    ]
  }

  {
    name            = calibOffAxisLLTCentering
    description     = Calibrate the off-axis beam pointing for the asterism
    args = [
      {
        name        = beam
        description = index of the off axis beam
        type        = integer
      }
      {
        name        = updateConfiguration
        description = Use the determined results to update the configuration.
        type        = boolean
      }
    ]
  }

  {
    name            = calibOffAxisDswfsCentering
    description     = Calibrate the off-axis beam centering for the asterism
    args = [
      {
        name        = beam
        description = index of the off axis beam
        type        = integer
      }
      {
        name        = updateConfiguration
        description = Use the determined results to update the configuration.
        type        = boolean
      }
    ]
  }
  {
    name            = asterism
    description     = Configure the asterism. It moves the FSM rotator if necessary and select the correct parametes for the DSWFS.
    args = [
      {
        name        = asterism
        description = The selected asterism. OTHER is for engineering purpose.
        enum        = [MCAO, MCAO_ALT, GLAO, MOAO, MIRAO, OTHER]
      }
    ]
  }
 
  {
    name            = exposure
    description     = set the exposure time and mode
    args = [
      {
        name        = enabled
        description = Exposure enabled
        enum        = [CONTINOUS, ONCE, OFF]
      }
      {
        name        = exposureTime
        description = Exposure time
        type        = double
        units       = seconds
      }
      {
        name        = exposureRate
        description = Exposure frame rate
        type        = double
        units       = hertz
      }
      {
        name        = PAC
        description = List of PAC
        type		    = array
        items = {
          type = string
        }
      }
      {
        name        = led
        description = Turn on led using PAC strobe signal
        type        = boolean
      }
      {
        name        = DSWFS
        description = DSWFS exposure
        type		    = boolean
      }
    ]
  }
 
]

send = [
  {
    subsystem = LGSF
    component = pac
    name = exposure
  }
  {
    subsystem = LGSF
    component = pac
    name = calib
  }
    {
    subsystem = LGSF
    component = dswfs
    name = exposure
  }
]