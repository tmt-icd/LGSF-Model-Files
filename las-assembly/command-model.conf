subsystem = LGSF
component = las

description = Laser System Assembly commands.

receive = [
  
  {
    name            = init
    description     = Prepares the assembly for operation and reads configuration files.
    
    args = [
      {
        name        = configName 
        description = """
        Name of the configuration file to get from the TMT Configuration Service
        The configuration includes the following entries at a minimum:
        - availableLasers: Array[8] of boolean
        - laserConnections: Array[8] of string (network address for laser interfacing)
        - laserIdentifiers: Array[8] of string (name given to each laser unit)
        - defaultAsterism: asterism name
        - NFIRAOS: Array [6] of integer of laser index
        - MIRAO: Array [3] of integer of laser index
        - MOAO: Array [8] of integer of laser index
        - GLAO: Array [4] of integer of laser index
        """
        type        = string
      }
      {
        name        = configVersion
        description = "Version of the configuration file to get from the TMT Configuration Service. Usually the default configuration is used"
        type        = string 
      }
    ]
  }
  {
    name            = debug
    description     = Set the debug message level.  (engineering)
    args = [
      {
        name        = level
        description = target debug level
        enum        = [ DEBUG, INFO, WARN, ERROR ] 
      }
    ]
    requiredArgs = [ debug ]
  }
  {
    name            = shutdown
    description     = Shutdown the component.  (engineering)
  }
  {
    name            = simulation
    description     = Enable simulation mode of each laser HCD.  (engineering)
    args = [
      {
        name        = enabled
        description = "enable simulation"
        type        = boolean
      }
    ]
  }
  {
    name            = asterism
    description     = Select asterism. 
    args = [
      {
        name        = name
        description = "canonical name of the asterism. Use 'custom' for engineering purpose"
        type        = string
      }
      {
        name        = index
        description = list of lasers with their index. Can be ommited if the asterism is known in the configuration file.
        type        = array
        items = {
          description = index of laser for each guide star in the asterism. 
          type      = integer 
        }
      }
    ]
  }

  {
    name            = laserState
    description     = Set Laser unit operational state
    args = [
      {
        name        = index
        description = laser index. applies too all laser in the current configured asterism if not supplied. 
        type        = integer
      }
      {
        name        = state
        description = new laser state
        enum        = [STANDBY, READY, ON, OBSERVATION]
      }
    ]
  }
  {
    name            = abortLaserState
    description     = Abort change request to Laser unit operational state 
    args = [
      {
        name        = index
        description = laser index. applies too all laser in the current configured asterism if not supplied. 
        type        = integer
      }
    ]
  }
  {
    name            = detune
    description     = Detune the lasers
    args = [
      {
        name        = index
        description = laser index. applies too all laser in the current configured asterism if not supplied. 
        type        = integer
      }
      {
        name        = enabled
        description = Set the detune status
        type        = array
        type        = boolean
      }
    ]
  }
  {
    name            = repump
    description     = Set fraction of laser power for repumping
    args = [
      {
        name        = index
        description = laser index. applies too all laser in the current configured asterism if not supplied. 
        type        = integer
      }
      {
        name        = fraction
        description = repump sideband ratio (fraction of total power for repump)
        type        = integer
        units       = percentage
      }
    ]
  }
  {
    name            = pointing (engineering)
    description     = change the output beam pointing
    args = [
      {
        name        = index
        description = Select the laser index
        type        = integer
      }
      {
        name        = angle
        description = desired angle change
        type        = array
        dimensions  = [2]
        items = {
          type = double
        }
        units       = degree
      }
    ]
  }
  {
    name            = coolingState
    description     = Set Laser cooling system operational state
    args = [
      {
        name        = temperature
        description = Set the target temperature
        type        = double
        units       = celsius degree

      }
      {
        name        = state
        description = Set the state
        enum        = [ON, OFF]
      }
    ]
  }
]
send = [
  {
    subsystem = LGSF
    component = lu
    name = init
  }
  {
    subsystem = LGSF
    component = lu
    name = debug
  }
  {
    subsystem = LGSF
    component = lu
    name = shutdown
  }
  {
    subsystem = LGSF
    component = lu
    name = simulation
  }
  {
    subsystem = LGSF
    component = lu
    name = laserState
  }
  {
    subsystem = LGSF
    component = lu
    name = abortLaserState
  }
  {
    subsystem = LGSF
    component = lu
    name = detune
  }
  {
    subsystem = LGSF
    component = lu
    name = repump
  }
  {
    subsystem = LGSF
    component = lu
    name = pointing
  }
]